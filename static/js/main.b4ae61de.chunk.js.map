{"version":3,"sources":["components/NavigationBar.js","components/Review.js","communication/api.js","components/Place.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["NavigationBar","props","useState","searchText","setSearchText","Navbar","bg","expand","variant","Nav","Link","InputGroup","className","FormControl","type","placeholder","onChange","event","target","value","Append","Button","onClick","alert","Review","Container","Col","Row","username","text","apiHost","api","addPlace","place","fetch","method","headers","body","JSON","stringify","getPlaces","then","response","json","addReview","review","placename","searchPlaces","query","name","address","Place","hideUpateInfo","setHideUpateInfo","placeInfo","setPlaceInfo","reviewComment","setReviewComment","reviewUsername","setReviewUsername","hideAddReview","setHideAddReview","reviewList","setReviewList","hidePlace","setHidePlace","useEffect","list","r","reviews","comment","push","hidden","console","log","catch","e","Home","placeTitle","setPlaceTitle","placeAddress","setPlaceAddress","placeList","setPlaceList","places","setupPlaceList","p","info","hideAddPlace","App","fluid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4ae61de.chunk.js","sourcesContent":["import Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport { useState } from 'react';\r\nimport '../App.css'\r\n\r\nfunction NavigationBar(props) {\r\n\r\n    const [searchText, setSearchText] = useState('');\r\n\r\n    let onSearchSubmitted = (event) => {\r\n        alert(\"Already displaying all \"+searchText);\r\n    }\r\n\r\n    let onSearchInput = (event) => {\r\n        setSearchText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n            <Nav.Link>\r\n                <InputGroup className=\"mb-3\" >\r\n                    <FormControl type=\"text\" placeholder=\"Search...\" onChange={onSearchInput}/>\r\n                    <InputGroup.Append>\r\n                        <Button onClick={onSearchSubmitted} variant=\"outline-primary\">Search</Button>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n            </Nav.Link>\r\n\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default NavigationBar;","import Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\nexport default function Review(props) {\r\n\r\n    return (\r\n        <Container className='Review'>\r\n            <Col>\r\n                <Row>\r\n                    <b>{props.username}</b>\r\n                </Row>\r\n                <Row>\r\n                    {props.text}\r\n                </Row>\r\n            </Col>\r\n            \r\n        </Container>\r\n    );\r\n}","\r\nlet apiHost = \"https://mynearbyplaces-serverside.herokuapp.com\";\r\n\r\n\r\n// Add a place\r\nlet addPlace = (place) => {\r\n    return fetch(apiHost + '/place', {\r\n        method: 'post',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(place)\r\n    });\r\n}\r\n\r\n// Get all of the palces\r\nlet getPlaces = () => {\r\n    return fetch(apiHost + '/places')\r\n        .then(response => response.json());\r\n}\r\n\r\n// Add a review to a specified place.\r\nlet addReview = (review) => {\r\n    return fetch(apiHost + '/review/' + review.placename, {\r\n        method: 'post',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(review)\r\n    });\r\n}\r\n\r\n// Search for a place by name and/or location\r\nlet searchPlaces = (place) => {\r\n    let query = \"/search?\";\r\n    if (!place.name === \"\") {\r\n        query += `placeName=${place.name}`;\r\n    }\r\n    if (!place.address === \"\") {\r\n        query += `&location=${place.address}`;\r\n    }\r\n    return fetch(apiHost + query)\r\n        .then(response => response.json());\r\n}\r\n\r\nlet api = {\r\n    addPlace: addPlace,\r\n    getPlaces: getPlaces,\r\n    addReview: addReview,\r\n    searchPlaces: searchPlaces\r\n};\r\n\r\nexport default api;","import Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport { useState, useEffect } from 'react';\r\nimport Review from './Review';\r\nimport api from '../communication/api';\r\n\r\n\r\nimport '../App.css'\r\n\r\n\r\nexport default function Place(props) {\r\n\r\n    const [hideUpateInfo, setHideUpateInfo] = useState(true);\r\n    const [placeInfo, setPlaceInfo] = useState(props.placeInfo);\r\n\r\n    const [reviewComment, setReviewComment] = useState('');\r\n    const [reviewUsername, setReviewUsername] = useState('');\r\n    const [hideAddReview, setHideAddReview] = useState(true);\r\n    const [reviewList, setReviewList] = useState(null);\r\n\r\n    const [hidePlace, setHidePlace] = useState(false);\r\n\r\n\r\n    // Toggle the update info textbox\r\n    let updateInfo = (event) => {\r\n        setHideUpateInfo(!hideUpateInfo);\r\n    }\r\n\r\n    // Get the updated text info\r\n    let onInfoInput = (event) => {\r\n        setPlaceInfo(event.target.value);\r\n    }\r\n\r\n    // Add a review to the review list from the review input (NO ACTUAL USE)\r\n    let onInfoUpdated = (event) => {\r\n        setHideUpateInfo(true);\r\n        setPlaceInfo(placeInfo);\r\n    }\r\n\r\n\r\n    // Toggle the add review textbox\r\n    let addAReview = (event) => {\r\n        setHideAddReview(!hideAddReview);\r\n    }\r\n\r\n    // Get the review username input\r\n    let onReviewUsernameInput = (event) => {\r\n        setReviewUsername(event.target.value);\r\n    }\r\n\r\n    // Get the review text input\r\n    let onReviewCommentInput = (event) => {\r\n        setReviewComment(event.target.value);\r\n    }\r\n\r\n    // Add a review to the review list from the review input\r\n    let onReviewSubmitted = (event) => {\r\n        // Add the review to the review list.\r\n        setHideAddReview(true);\r\n        reviewList.push(<Review username={reviewUsername} text={reviewComment} />);\r\n        setReviewUsername(\"\");\r\n        setReviewComment(\"\");\r\n\r\n        // Add the review to the api.\r\n        let review = {\"username\": reviewUsername, \"comment\": reviewComment, \"placename\": props.name};\r\n        api.addReview(review)\r\n        .then(() => { console.log(`Review by ${reviewUsername} was added successfully.`)})\r\n        .catch(e => console.log(e));\r\n    }\r\n\r\n    let deletePlace = (event) => {\r\n        setHidePlace(true);\r\n    }\r\n\r\n    // Set up the review list\r\n    useEffect(() => {\r\n        if (reviewList === null) {\r\n            let list = [];\r\n            for (let r in props.reviews) {\r\n                // Remove blank reviews from the list\r\n                if ((props.reviews[r].comment === null) && (props.reviews[r].comment === null)) {\r\n                    continue;\r\n                }\r\n                list.push(<Review text={props.reviews[r].comment} username={props.reviews[r].username} />);\r\n            }\r\n            setReviewList(list);\r\n        }\r\n\r\n    });\r\n\r\n    return (\r\n        <Container className='Place' hidden={hidePlace}>\r\n            <Col>\r\n                <Row>\r\n                    <h2>{props.name}</h2>\r\n                </Row>\r\n                <Row>\r\n                    <h5>{props.address}</h5>\r\n                </Row>\r\n                <Row>\r\n                    {placeInfo}\r\n                </Row>\r\n                <Row>\r\n                    <InputGroup className=\"mb-3\" hidden={hideUpateInfo}>\r\n                        <FormControl type=\"text\" placeholder=\"Update Info\" onChange={onInfoInput} />\r\n                        <InputGroup.Append>\r\n                            <Button onClick={onInfoUpdated} variant=\"primary\" >Update Info</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row>\r\n                    <h4>Reviews:</h4>\r\n                </Row>\r\n                <Row>\r\n                    {reviewList}\r\n                </Row>\r\n                <Row>\r\n                    <InputGroup className=\"mb-3\" hidden={hideAddReview}>\r\n                        <FormControl type=\"text\" placeholder=\"Enter Username\" value={reviewUsername} onChange={onReviewUsernameInput} />\r\n                        <FormControl type=\"text\" placeholder=\"Enter Review\" value={reviewComment} onChange={onReviewCommentInput} />\r\n                        <InputGroup.Append>\r\n                            <Button onClick={onReviewSubmitted} variant=\"primary\" >Submit Review</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row>\r\n                    <Button onClick={updateInfo}>Update</Button> &nbsp;&nbsp;&nbsp;\r\n                    <Button onClick={deletePlace}>Delete</Button> &nbsp;&nbsp;&nbsp;\r\n                    <Button onClick={addAReview}>Add Review</Button>\r\n                </Row>\r\n            </Col>\r\n        </Container>\r\n    );\r\n}","import Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport { useState, useEffect } from 'react';\r\nimport Place from './Place';\r\nimport '../App.css'\r\nimport api from '../communication/api';\r\n\r\n\r\nexport default function Home(props) {\r\n\r\n    const [placeTitle, setPlaceTitle] = useState(\"\");\r\n    const [placeAddress, setPlaceAddress] = useState('');\r\n    const [placeInfo, setPlaceInfo] = useState(\"\");\r\n    const [placeList, setPlaceList] = useState([\"Loading...\"]);\r\n\r\n    // Get the place to be added's Title\r\n    let onTitleInput = (event) => {\r\n        setPlaceTitle(event.target.value);\r\n    }\r\n\r\n    // Get the place to be added's info\r\n    let onInfoInput = (event) => {\r\n        setPlaceInfo(event.target.value);\r\n    }\r\n\r\n    // Get the place's address\r\n    let onAddressInput = (event) => {\r\n        setPlaceAddress(event.target.value);\r\n    }\r\n\r\n    // Add a place to the place list from the place input\r\n    let onPlaceSubmitted = (event) => {\r\n\r\n        // Add the place to the api.\r\n        let place = {\"name\": placeTitle, \"address\": placeAddress, \"info\": placeInfo};\r\n        api.addPlace(place)\r\n        .then(() => { console.log(`The place ${placeTitle} was added successfully.`)})\r\n        .catch(e => console.log(e));\r\n\r\n        // Add the place to the place list.\r\n        placeList.push(<Place placeInfo={placeInfo} name={placeTitle} address={placeAddress}/>);\r\n        setPlaceTitle('');\r\n        setPlaceAddress('');\r\n        setPlaceInfo('');\r\n    }\r\n\r\n    // Check if the places need to be loaded\r\n    useEffect(() => {\r\n        if(placeList[0] === \"Loading...\") {\r\n            api.getPlaces()\r\n            .then(places => setupPlaceList(places))\r\n            .catch(e => console.log(e));\r\n        }\r\n    });\r\n\r\n    // Set up the place list with Place objects.\r\n    let setupPlaceList = (places) => {\r\n        let list = [];\r\n        for(let p in places) {\r\n            list.push(<Place placeInfo={places[p].info} name={places[p].name} address={places[p].address} reviews={places[p].reviews}/>);\r\n        }\r\n        setPlaceList(list);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container >\r\n            <Container className='Place'>\r\n                <Col>\r\n                    <Row>\r\n                        <InputGroup className=\"mb-3\" hidden={props.hideAddPlace}>\r\n                            <FormControl type=\"text\" placeholder=\"Enter Title\" value={placeTitle} onChange={onTitleInput} />\r\n                            <FormControl type=\"text\" placeholder=\"Enter Address\" value={placeAddress} onChange={onAddressInput} />\r\n                            <FormControl type=\"text\" placeholder=\"Enter Info\" value={placeInfo} onChange={onInfoInput} />\r\n                            <InputGroup.Append>\r\n                                <Button onClick={onPlaceSubmitted} variant=\"primary\" >Submit Place</Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </Row>\r\n\r\n                </Col>\r\n            </Container>\r\n            <Col>\r\n                <Row>\r\n                    {placeList}\r\n                </Row>\r\n            </Col>\r\n        </Container>\r\n    );\r\n}","import './App.css';\nimport Container from 'react-bootstrap/Container';\nimport NavigationBar from \"./components/NavigationBar\";\nimport Home from './components/Home';\n\nfunction App() {\n\n\n    return (\n        <Container fluid>\n            <NavigationBar />\n            <Home />\n        </Container>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}