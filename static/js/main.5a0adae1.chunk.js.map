{"version":3,"sources":["components/NavigationBar.js","components/Review.js","components/Place.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["NavigationBar","props","useState","searchText","setSearchText","Navbar","bg","expand","variant","Nav","Link","InputGroup","className","FormControl","type","placeholder","onChange","event","target","value","Append","Button","onClick","alert","Review","Container","text","Place","hideUpateInfo","setHideUpateInfo","placeInfo","setPlaceInfo","nextReview","setNextReview","hideAddReview","setHideAddReview","reviewList","hidePlace","setHidePlace","hidden","Col","Row","name","push","Home","placeTitle","setPlaceTitle","placeList","placeCount","setPlaceCount","hideAddPlace","App","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a0adae1.chunk.js","sourcesContent":["import Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport { useState } from 'react';\r\nimport '../App.css'\r\n\r\nfunction NavigationBar(props) {\r\n\r\n    const [searchText, setSearchText] = useState('');\r\n\r\n    let onSearchSubmitted = (event) => {\r\n        alert(\"Already displaying all \"+searchText);\r\n    }\r\n\r\n    let onSearchInput = (event) => {\r\n        setSearchText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n            <Nav.Link>\r\n                <InputGroup className=\"mb-3\" >\r\n                    <FormControl type=\"text\" placeholder=\"Search...\" onChange={onSearchInput}/>\r\n                    <InputGroup.Append>\r\n                        <Button onClick={onSearchSubmitted} variant=\"outline-primary\">Search</Button>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n            </Nav.Link>\r\n\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default NavigationBar;","import Container from 'react-bootstrap/Container';\r\n\r\n\r\nexport default function Review(props) {\r\n\r\n    return (\r\n        <Container className='Review'>\r\n            {props.text}\r\n        </Container>\r\n    );\r\n}","import Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport { useState } from 'react';\r\nimport Review from './Review';\r\n\r\n\r\nimport '../App.css'\r\n\r\n\r\nexport default function Place(props) {\r\n\r\n    const [hideUpateInfo, setHideUpateInfo] = useState(true);\r\n    const [placeInfo, setPlaceInfo] = useState(props.placeInfo);\r\n\r\n    const [nextReview, setNextReview] = useState('');\r\n    const [hideAddReview, setHideAddReview] = useState(true);\r\n    const [reviewList, setReviewList] = useState([]);\r\n\r\n    const [hidePlace, setHidePlace] = useState(false);\r\n\r\n\r\n    // Toggle the update info textbox\r\n    let updateInfo = (event) => {\r\n        setHideUpateInfo(!hideUpateInfo);\r\n    }\r\n\r\n    // Get the updated text info\r\n    let onInfoInput = (event) => {\r\n        setPlaceInfo(event.target.value);\r\n    }\r\n\r\n    // Add a review to the review list from the review input (NO ACTUAL USE)\r\n    let onInfoUpdated = (event) => {\r\n        setHideUpateInfo(true);\r\n        setPlaceInfo(placeInfo);\r\n    }\r\n\r\n\r\n    // Toggle the add review textbox\r\n    let addAReview = (event) => {\r\n        setHideAddReview(!hideAddReview);\r\n    }\r\n\r\n    // Get the review text input\r\n    let onReviewInput = (event) => {\r\n        setNextReview(event.target.value);\r\n    }\r\n\r\n    // Add a review to the review list from the review input\r\n    let onReviewSubmitted = (event) => {\r\n        setHideAddReview(true);\r\n        reviewList.push(<Review text={nextReview} />);\r\n        //setReviewList(reviewList);\r\n    }\r\n\r\n    let deletePlace = (event) => {\r\n        setHidePlace(true);\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className='Place' hidden={hidePlace}>\r\n            <Col>\r\n                <Row>\r\n                    <h2>{props.name}</h2>\r\n                </Row>\r\n                <Row>\r\n                    {placeInfo}\r\n                </Row>\r\n                <Row>\r\n                    <InputGroup className=\"mb-3\" hidden={hideUpateInfo}>\r\n                        <FormControl type=\"text\" placeholder=\"Update Info\" onChange={onInfoInput} />\r\n                        <InputGroup.Append>\r\n                            <Button onClick={onInfoUpdated} variant=\"primary\" >Update Info</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row>\r\n                    <h4>Reviews:</h4>\r\n                </Row>\r\n                <Row>\r\n                    {reviewList}\r\n                </Row>\r\n                <Row>\r\n                    <InputGroup className=\"mb-3\" hidden={hideAddReview}>\r\n                        <FormControl type=\"text\" placeholder=\"Enter Review\" onChange={onReviewInput} />\r\n                        <InputGroup.Append>\r\n                            <Button onClick={onReviewSubmitted} variant=\"primary\" >Submit Review</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row>\r\n                    <Button onClick={updateInfo}>Update</Button> &nbsp;&nbsp;&nbsp;\r\n                    <Button onClick={deletePlace}>Delete</Button> &nbsp;&nbsp;&nbsp;\r\n                    <Button onClick={addAReview}>Add Review</Button>\r\n                </Row>\r\n            </Col>\r\n        </Container>\r\n    );\r\n}","import Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport { useState } from 'react';\r\nimport Place from './Place';\r\nimport '../App.css'\r\n\r\n\r\nexport default function Home(props) {\r\n\r\n    const [placeTitle, setPlaceTitle] = useState(\"\");\r\n    const [placeInfo, setPlaceInfo] = useState(\"\");\r\n    const [placeList, setPlaceList] = useState([]);\r\n\r\n    const [placeCount, setPlaceCount] = useState(0);\r\n\r\n    // Get the place to be added's Title\r\n    let onTitleInput = (event) => {\r\n        setPlaceTitle(event.target.value);\r\n    }\r\n\r\n    // Get the place to be added's info\r\n    let onInfoInput = (event) => {\r\n        setPlaceInfo(event.target.value);\r\n    }\r\n\r\n    // Add a place to the place list from the place input\r\n    let onPlaceSubmitted = (event) => {\r\n        placeList.push(<Place placeInfo={placeInfo} name={placeTitle} />);\r\n       // Works as a forced refresh so placeList will update\r\n        setPlaceCount(placeCount+1);\r\n    }\r\n\r\n    return (\r\n        <Container >\r\n            <Container className='Place'>\r\n                <Col>\r\n                    <Row>\r\n                        <InputGroup className=\"mb-3\" hidden={props.hideAddPlace}>\r\n                            <FormControl type=\"text\" placeholder=\"Enter Title\" onChange={onTitleInput} />\r\n                            <FormControl type=\"text\" placeholder=\"Enter Info\" onChange={onInfoInput} />\r\n                            <InputGroup.Append>\r\n                                <Button onClick={onPlaceSubmitted} variant=\"primary\" >Submit Place</Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </Row>\r\n\r\n                </Col>\r\n            </Container>\r\n            <Col>\r\n                <Row>\r\n                    {placeList}\r\n                </Row>\r\n            </Col>\r\n        </Container>\r\n    );\r\n}","import './App.css';\nimport Container from 'react-bootstrap/Container';\nimport NavigationBar from \"./components/NavigationBar\";\nimport { useState } from 'react';\nimport Place from './components/Place';\nimport Home from './components/Home';\n\nfunction App() {\n\n\n    return (\n        <Container fluid>\n            <NavigationBar />\n            <Home />\n        </Container>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}